// APPROACH 1

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        // vector<int> v1,v2;
        set<int> r;
        set<int> c;
        
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(matrix[i][j] == 0) {
                    r.insert(i);
                    c.insert(j);
                }
            }
        }
        
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                if(r.count(i) or c.count(j))
                    matrix[i][j] = 0;
            }
        }
        // return matrix;
    }
};



// OR


class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        vector<bool> row(matrix.size());
        vector<bool> column(matrix[0].size());

        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[0].size(); j++) {
                if (matrix[i][j] == 0) {
                    row[i] = true;
                    column[j] = true;
                }
            }
        }

        for (int i = 0; i < matrix.size(); i++) {
            for (int j = 0; j < matrix[0].size(); j++) {
                if (row[i] || column[j]) {
                    matrix[i][j] = 0;
                }
            }
        }
    }
};




// OR



class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int m = matrix.size();
        int n = matrix[0].size();
        
        int mat[m][n];			
        memset(mat, 0, sizeof(mat));

        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                if(matrix[i][j] == 0) mat[i][j] = 1;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++){
                if (mat[i][j] == 1) {
                    for (int k = 0; k < m; k++) matrix[k][j] = 0;
                    for (int k = 0; k < n; k++) matrix[i][k] = 0;
                }
            }
        }
    }
};




// APPROACH 2


