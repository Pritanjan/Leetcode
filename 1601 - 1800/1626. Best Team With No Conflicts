class Solution {
public:
    int bestTeamScore(vector<int>& scores, vector<int>& ages) {
        int n = scores.size();
        vector<vector<int>> arr(n, vector<int>(2));
        for(int i=0; i<n; i++) {
            arr[i][0] = ages[i];
            arr[i][1] = scores[i];
        }
        sort(arr.begin(), arr.end(), [](vector<int>& v1, vector<int>& v2) {
            if(v1[0] == v2[0]) {
                return v1[1] < v2[1];
            }
            return v1[0] < v2[0];
        });

        vector<int> dp(n);
        int max_score = arr[0][1];
        for(int i=0; i<n; i++) {
            dp[i] = arr[i][1];
            for(int j=0; j<i; j++) {
                if(arr[j][1] <= arr[i][1]) {
                    dp[i] = max(dp[i], dp[j] + arr[i][1]);
                }
            }
            max_score = max(max_score, dp[i]);
        }
        return max_score;
    }
};










// https://space.bilibili.com/206214
int init_ = []() {
    cin.tie(nullptr)->sync_with_stdio(false);
    return 0;
}();

class Solution {
public:
    int bestTeamScore(vector<int> &scores, vector<int> &ages) {
        int n = scores.size(), m = 0;
        for (int i = 0; i < n; i++) {
            m = max(m, ages[i]);
            ages[i] |= scores[i] << 10;
        }
        sort(ages.begin(), ages.end());

        int t[1001]{};
        int ans = 0;
        for (int p : ages) {
            int age = p & 1023, mx = t[age];
            for (int i = age & (age - 1); i > 0; i &= i - 1)
                mx = max(mx, t[i]);
            mx += p >> 10;
            ans = max(ans, mx);
            t[age] = mx;
            for (int i = age + (age & -age); i <= m; i += i & -i)
                t[i] = max(t[i], mx);
        }
        return ans;
    }
};









